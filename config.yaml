# Sample config file for the ha-alarm-raspy2mqtt utility
# Written by Francesco Montorsi, Feb 2024.

mqtt_broker:
  # the IP or FQDN of the server hosting the MQTT broker:
  host: 192.168.1.5

  # in case the connection with the broker drops, a reconnection will be attempted each X msec:
  reconnection_period_msec: 1500

  # in case your broker has authentication turned on, please provide user/pw
  # TODO: password is cleartext right now, which is insecure
  #user: 
  #password:

home_assistant:
  # how often should this software re-publish the status of all inputs / outputs inside MQTT?
  # note that this software will publish the status of an input/output even if it didn't change
  # since previous update; the reason is to reset the expire timer associated typically
  # inside HomeAssistant for each MQTT sensor (see the "expire_after" property).
  publish_period_msec: 3000

  # this is the default topic prefix used for all entries listed below in the 'i2c_optoisolated_inputs',
  # 'gpio_inputs' and 'outputs' sections
  default_topic_prefix: home

  # MQTT discovery messages feature
  discovery_messages:
    # if you choose to disable discovery messages, then you need to provide a MQTT configuration
    # to HomeAssistant inside its configuration.yaml, see https://www.home-assistant.io/integrations/mqtt/
    # section "Configuration of MQTT components via YAML"
    enable: true

    # this is the MQTT topic prefix for discovery messages; it needs to coincide with the MQTT discovery
    # topic prefix used by your HomeAssistant, see https://www.home-assistant.io/integrations/mqtt/#mqtt-discovery
    topic_prefix: homeassistant

    # the node_id must be a unique identifier of this specific instance of this software; it will be
    # prefixed to each and every entity exposed into HomeAssistant, so this should be a short string.
    # It defaults to the hostname of the system.
    # See https://www.home-assistant.io/integrations/mqtt/#naming-of-mqtt-entities for more info.
    node_id: ha-alarm-raspy2mqtt

    # discovery messages don't need to be published that often... but it's good to re-publish them every 
    # now and then in case HomeAssistant is restarted.
    # TODO: an alternative and better approach would be to listen on the HomeAssistant 'status' topic and publish
    # the discovery messages only when an HomeAssistant restart is detected; see
    # https://www.home-assistant.io/integrations/mqtt/#use-the-birth-and-will-messages-to-trigger-discovery
    message_period_sec: 100

# stats printed on stdout each N secs:
log_stats_every: 30

# opto-isolated inputs are those sampled by the Sequent Microsystem 16ch-optoinsulated board
# NOTE1: the inputs are numbered 1-based, just like in the silk-screen printing on the board itself
# NOTE2: the MQTT topic will be in the form "home/<name>", don't use spaces in the name!
# NOTE3: to raise security/robustness of the alarm system, on HomeAssistant the "expire_after" property
#        should be used; the MQTT topics for opto-isolated inputs are continuously updated at a frequency
#        configured by 'mqtt_broker.publish_period_msec'
i2c_optoisolated_inputs:
  - name: opto_input_1
    description: Opto-isolated Input for Sensor XYZ
    input_num: 1
    active_low: true
    mqtt:
      topic: overriden_topic_name
      payload_on: "ON"
      payload_off: "OFF"
    home_assistant:
      device_class: motion
      expire_after: 30
      icon: mdi:motion-sensor
  - name: opto_input_2
    description: Opto-isolated Input for Sensor BCD
    input_num: 2
    active_low: true
    mqtt:
      #topic defaults to 'home/<name>'
      payload_on: "ON"
      payload_off: "OFF"
    home_assistant:
      device_class: tamper
      expire_after: 30
      icon: mdi:check-circle

# GPIO inputs are those sampled by Raspberry directly using its own GPIO pins (3.3V compatible)
# NOTE1: a fundamental difference with 'i2c_optoisolated_inputs' is that the MQTT topics configured
#        for these GPIO inputs are updated with a message only when the GPIO transition from "inactive -> active"
#        is detected. If no "inactive -> active" transitions are detected, no MQTT messages are published
# NOTE2: the MQTT topic will be in the form "<topic>" and will receive the configured "<payload>"
gpio_inputs:
  - name: radio_channel_a
    description: Radio Channel A
    gpio: 27
    active_low: false
    mqtt:
      topic: alarmo/command
      payload: ARM_AWAY
    # NO 'home_assistant' dictionary here... reason is that the 'gpio_inputs' do not produce any
    # HomeAssistant binary_sensor. They just trigger the publish of a particular payload on a particular topic... so far


# outputs channels are used to drive the SeenGreat 2ch optoinsulated board
# NOTE1: all outputs are active low in this kind of board (i.e. to trigger the relay the GPIO must be driven low)
# NOTE2: the MQTT topic subscribed will be in the form "home/<output name>", don't use spaces in the name!
# NOTE3: the MQTT topic "home/<output name>/state" will be updated after confirming that the output has successfully
#        changed status
outputs:
  - name: ext_alarm_siren
    description: External Alarm Siren
    gpio: 20
    active_low: true
    mqtt:
      #command_topic defaults to 'home/<name>'
      #state_topic defaults to 'home/<name>/state'
      payload_on: "ON"
      payload_off: "OFF"
    home_assistant:
      device_class: switch # could be 'outlet'
      icon: mdi:alarm-bell
  - name: int_alarm_siren
    description: Internal Alarm Siren
    gpio: 21
    active_low: true
    mqtt:
      #command_topic defaults to 'home/<name>'
      #state_topic defaults to 'home/<name>/state'
      payload_on: "ON"
      payload_off: "OFF"
    home_assistant:
      device_class: switch # could be 'outlet'
      icon: mdi:alarm-bell
